// ============================================
// File: DevPioneers.Application/Features/Auth/Commands/VerifyOtpCommandHandler.cs
// ============================================
using DevPioneers.Application.Common.Interfaces;
using DevPioneers.Application.Common.Models;
using DevPioneers.Application.Features.Auth.DTOs;
using DevPioneers.Domain.Enums;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace DevPioneers.Application.Features.Auth.Commands;

public class VerifyOtpCommandHandler : IRequestHandler<VerifyOtpCommand, Result<AuthResponseDto>>
{
    private readonly IApplicationDbContext _context;
    private readonly ILogger<VerifyOtpCommandHandler> _logger;
    private readonly IDateTime _dateTime;

    public VerifyOtpCommandHandler(
        IApplicationDbContext context,
        ILogger<VerifyOtpCommandHandler> logger,
        IDateTime dateTime)
    {
        _context = context;
        _logger = logger;
        _dateTime = dateTime;
    }

    public async Task<Result<AuthResponseDto>> Handle(VerifyOtpCommand request, CancellationToken cancellationToken)
    {
        try
        {
            if (!int.TryParse(request.UserId, out var userId))
            {
                return Result<AuthResponseDto>.Failure("Invalid user ID");
            }

            // Find user with their OTP codes
            var user = await _context.Users
                .Include(u => u.UserRoles)
                    .ThenInclude(ur => ur.Role)
                .Include(u => u.OtpCodes.Where(otp => !otp.IsVerified && otp.ExpiresAt > DateTime.UtcNow))
                .FirstOrDefaultAsync(u => u.Id == userId, cancellationToken);


            if (user == null)
            {
                _logger.LogWarning("OTP verification failed: User not found {UserId}", userId);
                return Result<AuthResponseDto>.Failure("Invalid user");
            }

            // Find valid OTP code
            var otpCode = user.OtpCodes
                .FirstOrDefault(otp => otp.Code == request.OtpCode &&
                                      !otp.IsVerified &&
                                      otp.ExpiresAt > _dateTime.UtcNow);

            if (otpCode == null)
            {
                _logger.LogWarning("OTP verification failed: Invalid or expired code for user {UserId}", userId);
                return Result<AuthResponseDto>.Failure("Invalid or expired OTP code");
            }

            // Mark OTP as used
            otpCode.MarkAsVerified();

            // Update user login info
            user.RecordSuccessfulLogin(request.IpAddress);

            await _context.SaveChangesAsync(cancellationToken);

            var authResponse = new AuthResponseDto
            {
                UserId = user.Id,
                Email = user.Email,
                FullName = user.FullName,
                Roles = user.UserRoles.Select(ur => ur.Role.Name).ToList(),
                RequiresTwoFactor = false
                // JWT tokens will be generated by Infrastructure layer
            };

            _logger.LogInformation("OTP verified successfully for user {UserId}", user.Id);
            return Result<AuthResponseDto>.Success(authResponse);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "OTP verification failed for user {UserId}", request.UserId);
            return Result<AuthResponseDto>.Failure("An error occurred during OTP verification");
        }
    }
}
