// ============================================
// File: DevPioneers.Application/Features/Auth/Commands/RefreshTokenCommandHandler.cs
// ============================================
using DevPioneers.Application.Common.Interfaces;
using DevPioneers.Application.Common.Models;
using DevPioneers.Application.Features.Auth.DTOs;
using DevPioneers.Domain.Enums;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace DevPioneers.Application.Features.Auth.Commands;

public class RefreshTokenCommandHandler : IRequestHandler<RefreshTokenCommand, Result<AuthResponseDto>>
{
    private readonly IApplicationDbContext _context;
    private readonly ILogger<RefreshTokenCommandHandler> _logger;
    private readonly IDateTime _dateTime;

    public RefreshTokenCommandHandler(
        IApplicationDbContext context,
        ILogger<RefreshTokenCommandHandler> logger,
        IDateTime dateTime)
    {
        _context = context;
        _logger = logger;
        _dateTime = dateTime;
    }

    public async Task<Result<AuthResponseDto>> Handle(RefreshTokenCommand request, CancellationToken cancellationToken)
    {
        try
        {
            // Find refresh token
            var refreshToken = await _context.RefreshTokens
                .Include(rt => rt.User)
                    .ThenInclude(u => u.UserRoles)
                        .ThenInclude(ur => ur.Role)
                .FirstOrDefaultAsync(rt => rt.Token == request.RefreshToken, cancellationToken);

            if (refreshToken == null)
            {
                _logger.LogWarning("Refresh token not found: {RefreshToken}", request.RefreshToken[..8] + "...");
                return Result<AuthResponseDto>.Failure("Invalid refresh token");
            }

            // Check if token is expired
            if (refreshToken.IsExpired)
            {
                _logger.LogWarning("Expired refresh token used for user {UserId}", refreshToken.UserId);
                return Result<AuthResponseDto>.Failure("Refresh token has expired");
            }

            // Check if token is revoked
            if (refreshToken.IsRevoked)
            {
                _logger.LogWarning("Revoked refresh token used for user {UserId}", refreshToken.UserId);
                return Result<AuthResponseDto>.Failure("Refresh token has been revoked");
            }

            var user = refreshToken.User;

            // Check if user is still active
            if (user.Status != UserStatus.Active)
            {
                _logger.LogWarning("Refresh token used for inactive user {UserId}, Status: {Status}", 
                    user.Id, user.Status);
                return Result<AuthResponseDto>.Failure("User account is not active");
            }

            // Mark current token as used
            refreshToken.MarkAsUsed(request.IpAddress);
            await _context.SaveChangesAsync(cancellationToken);

            var authResponse = new AuthResponseDto
            {
                UserId = user.Id,
                Email = user.Email,
                FullName = user.FullName,
                Roles = user.UserRoles.Select(ur => ur.Role.Name).ToList(),
                RequiresTwoFactor = false
                // New JWT tokens will be generated by Infrastructure layer
            };

            _logger.LogInformation("Refresh token used successfully for user {UserId}", user.Id);
            return Result<AuthResponseDto>.Success(authResponse);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Refresh token operation failed");
            return Result<AuthResponseDto>.Failure("An error occurred during token refresh");
        }
    }
}